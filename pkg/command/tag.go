package command

import (
	"flag"
	"fmt"
	"os"

	"github.com/jessegeens/go-toolbox/pkg/hashing"
	"github.com/jessegeens/go-toolbox/pkg/kvlm"
	"github.com/jessegeens/go-toolbox/pkg/objects"
	"github.com/jessegeens/go-toolbox/pkg/references"
	"github.com/jessegeens/go-toolbox/pkg/repository"
)

func TagCommand() *Command {
	command := newCommand("tag")
	command.Action = func(args []string) error {
		create := *flag.Bool("annotate", false, "Whether to create a tag object")
		name := *flag.String("name", "", "The new tag's name")
		object := *flag.String("object", "HEAD", "The object the new tag will point to")

		repo, err := repository.Find(".")
		if err != nil {
			return err
		}

		if name != "" {
			// Name is set, so we want to create a tag
			tagCreate(repo, name, object, create)
		} else {
			refs, err := references.List(repo)
			if err != nil {
				return err
			}
			showRefs(repo, false, refs, "")
		}

		return nil
	}
	command.Description = func() string { return "List and create tags" }
	return command
}

func tagCreate(repo *repository.Repository, name, ref string, createTagObject bool) error {
	sha, err := objects.Find(repo, ref, objects.TypeNoTypeSpecified, true)
	if err != nil {
		return err
	}

	if createTagObject {

		tagData := kvlm.New()
		tagData.Okv.Set("object", []byte(sha.AsString()))
		tagData.Okv.Set("type", []byte("commit"))
		tagData.Okv.Set("name", []byte(name))
		// This little trick gets me so many tags $$$$$
		tagData.Okv.Set("tagger", []byte("Jesse Geens"))
		tagData.Message = []byte("A tag generated by got")

		tag := objects.Tag(*objects.NewCommit(tagData))
		tagSha, err := objects.WriteObject(objects.GitObject(&tag), repo)
		if err != nil {
			return err
		}

		return refCreate(repo, fmt.Sprintf("tags/%s", name), tagSha)

	} else {
		return refCreate(repo, fmt.Sprintf("tags/%s", name), sha)
	}
}

func refCreate(repo *repository.Repository, refName string, sha *hashing.SHA) error {
	path, err := repo.RepositoryFile(false, fmt.Sprintf("refs/%s", refName))
	if err != nil {
		return err
	}

	return os.WriteFile(path, []byte(sha.AsString()+"\n"), os.ModePerm)
}
